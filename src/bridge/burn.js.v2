require("dotenv").config()

const { BridgeSDK, TOKEN, EXCHANGE_MODE, NETWORK_TYPE, ACTION_TYPE } = require('bridge-sdk')
const configs = require('bridge-sdk/lib/configs')
const BN = require('bn.js')
const ethers = require('ethers');
const formatEther = require('ethers').utils.formatEther
const parseEther = require('ethers').utils.parseEther

/*
 * Exports for all public functions
*/
module.exports.Burn = async function(amount, jumperAddress) {
  return await burn(amount, jumperAddress)
}

/* Signs a `burn` transaction and generates a hash
 * @param {string} jumperAddress
 * @param {bigNumber} amount
 * @return {string} JSON with the request response
*/
async function burn(amount, jumperAddress) {

  const bridgeSDK = new BridgeSDK({ logLevel: 2 }); // 2 - full logs, 1 - only success & errors, 0 - logs off

  await bridgeSDK.init(configs.testnet);

  bridgeSDK.addOneWallet(process.env.PRIVATE_KEY);

  try {
    const amount = 2;
    const oneAddress = process.env.JUMPER_ONE_ADDRESS
    const formattedAmount = amount/1e18

    const operation = await bridgeSDK.createOperation({
      type: EXCHANGE_MODE.ONE_TO_ETH,
      token: TOKEN.ERC20,
      erc20Address: process.env.BSC_BUSD_CONTRACT,
      network: NETWORK_TYPE.BINANCE,
      amount: formattedAmount,
      oneAddress: oneAddress,
      ethAddress: jumperAddress,
    });

    await operation.sdk.hmyClient.hmyMethodsDeposit.deposit(
      operation.operation.actions[0].depositAmount,
      async transactionHash => {
        console.log('Deposit hash: ', transactionHash);

        await operation.confirmAction({
          actionType: ACTION_TYPE.depositOne,
          transactionHash,
        });
      }
    );

    await operation.waitActionComplete(ACTION_TYPE.depositOne);

    console.log(`Completed Deposit`)

    await operation.sdk.hmyClient.hmyMethodsERC20.approveHmyManger(amount, async transactionHash => {
      console.log('Approve hash: ', transactionHash);

      await operation.confirmAction({
        actionType: ACTION_TYPE.approveHmyManger,
        transactionHash,
      });
    });

    await operation.waitActionComplete(ACTION_TYPE.approveHmyManger);

    console.log(`Completed Approval`)
    await operation.sdk.hmyClient.hmyMethodsERC20.burnToken(
      ethAddress,
      amount,
      async transactionHash => {
        console.log('burnToken hash: ', transactionHash);

        await operation.confirmAction({
          actionType: ACTION_TYPE.burnToken,
          transactionHash,
        });
      }
    );

    await operation.waitActionComplete(ACTION_TYPE.burnToken);

    console.log(`Completed Burn`)
    await operation.waitOperationComplete();
    console.log("Burn Token Completed")
    return { trx: "burn", success: true}
  } catch (e) {
    console.log (`Burn error message: ${JSON.stringify(e.message)}`)
    console.log (`Burn error body: ${JSON.stringify(e.response?.body)}`)
    return { trx: "burn", success: true, error_message: e.message, error_body: e.response?.body}
  }
};


